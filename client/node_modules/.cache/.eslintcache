[{"C:\\Users\\ooffe\\web\\WebProject\\client\\src\\index.js":"1","C:\\Users\\ooffe\\web\\WebProject\\client\\src\\App.js":"2","C:\\Users\\ooffe\\web\\WebProject\\client\\src\\components\\Register.js":"3","C:\\Users\\ooffe\\web\\WebProject\\client\\src\\components\\LogIn.js":"4","C:\\Users\\ooffe\\web\\WebProject\\client\\src\\components\\Todo.js":"5","C:\\Users\\ooffe\\web\\WebProject\\client\\src\\services\\serverCom.js":"6","C:\\Users\\ooffe\\web\\WebProject\\client\\src\\components\\Navigator.js":"7","C:\\Users\\ooffe\\web\\WebProject\\client\\src\\components\\Home.js":"8"},{"size":133,"mtime":1625576765386,"results":"9","hashOfConfig":"10"},{"size":1457,"mtime":1625587534722,"results":"11","hashOfConfig":"10"},{"size":3302,"mtime":1625539229792,"results":"12","hashOfConfig":"10"},{"size":2399,"mtime":1625584830956,"results":"13","hashOfConfig":"10"},{"size":7056,"mtime":1625565945361,"results":"14","hashOfConfig":"10"},{"size":1152,"mtime":1625575481476,"results":"15","hashOfConfig":"10"},{"size":1590,"mtime":1625586935983,"results":"16","hashOfConfig":"10"},{"size":245,"mtime":1625543919976,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"gtpt8s",{"filePath":"20","messages":"21","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"25"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"25"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"C:\\Users\\ooffe\\web\\WebProject\\client\\src\\index.js",[],"C:\\Users\\ooffe\\web\\WebProject\\client\\src\\App.js",["38","39"],"C:\\Users\\ooffe\\web\\WebProject\\client\\src\\components\\Register.js",["40","41","42"],"import {  Form, Button,Container ,Row,Col,Badge,Alert} from 'react-bootstrap'\r\nimport React, { useState } from 'react'\r\nimport { useHistory } from \"react-router-dom\";\r\nconst sc=require(\"../services/serverCom.js\");\r\n\r\nvar setNotefunc=()=>{}\r\nvar setNoteTextfunc=()=>{}\r\nvar setNoteVarfunc=()=>{}\r\n\r\nvar history=null\r\n\r\nconst onSuccess=()=>\r\n{\r\n  console.log(\"onSuccess\")\r\n  setNoteVarfunc(\"success\")\r\n  setNoteTextfunc(\"Registerd successfuly\")\r\n  setNotefunc(true)\r\n}\r\n\r\nconst onFailure=()=>\r\n{\r\n  console.log(\"onFailure\")\r\n  setNoteVarfunc(\"warning\")\r\n  setNoteTextfunc(\"User exists\")\r\n  setNotefunc(true)\r\n}\r\n\r\n\r\nvar onSubmit=(event)=>{\r\n\r\n\r\n  event.preventDefault();\r\n  \r\n  const form = event.currentTarget\r\n  console.log(\"formGridUserName\")\r\n  console.log(form.formGridUserName.value)\r\n\r\n  console.log(\"formGridPassword\")\r\n  console.log(form.formGridPassword.value)\r\n\r\n  console.log(\"formGridPasswordAgain\")\r\n  console.log(form.formGridPasswordAgain.value)\r\n\r\n  const username=form.formGridUserName.value\r\n  const password=form.formGridPassword.value\r\n  const PasswordAgain=form.formGridPasswordAgain.value\r\n  if(password!==PasswordAgain){\r\n    setNoteTextfunc(\"Passwords dont match\")\r\n    setNoteVarfunc(\"warning\")\r\n    setNotefunc(true)\r\n    return\r\n  }\r\n  sc.register(username,password,onSuccess,onFailure)\r\n\r\n\r\n}\r\n\r\nconst Register = ({ setAuto }) => {\r\n    let History = useHistory()\r\n    history=History\r\n    const [show, setShow] = useState(false);\r\n    const [notificationText,setNotificationText]=useState(\"empty\")\r\n    const [notificationVariant,setNotificationVariant]=useState(\"warning\")\r\n    setNotefunc=setShow\r\n    setNoteTextfunc=setNotificationText\r\n    setNoteVarfunc=setNotificationVariant\r\n    return (\r\n        <Form onSubmit={onSubmit}  >\r\n        <h1 >\r\n        Register\r\n        </h1>\r\n\r\n        <Alert show={show} variant={`${notificationVariant}`} >\r\n              <Alert.Heading>Registration info</Alert.Heading>\r\n              <p>\r\n                {notificationText}\r\n              </p>\r\n              <hr />\r\n              <div className=\"d-flex justify-content-end\">\r\n                <Button onClick={() => setShow(false)} variant=\"outline-warning\">\r\n                  Close\r\n                </Button>\r\n              </div>\r\n            </Alert>\r\n        <Col>\r\n          <Form.Group   controlId=\"formGridUserName\">\r\n            <Form.Label>Username</Form.Label>\r\n            <Form.Control type=\"username\" placeholder=\"Chose your username\" />\r\n          </Form.Group>\r\n      \r\n          <Form.Group   controlId=\"formGridPassword\">\r\n            <Form.Label>Password</Form.Label>\r\n            <Form.Control type=\"password\" placeholder=\"Chose your password\" />\r\n          </Form.Group>\r\n          <Form.Group   controlId=\"formGridPasswordAgain\">\r\n            <Form.Label>Rewrite Password</Form.Label>\r\n            <Form.Control type=\"password\" placeholder=\"Rewrite the chosen password , please avoid useing copy paste\" />\r\n          </Form.Group>\r\n        </Col>\r\n      <Col>\r\n        <Form.Group  controlId=\"button\" >\r\n        <Row>\r\n            <Col md={4}>\r\n                <Button type=\"submit\" block>Register</Button>\r\n               \r\n            </Col>\r\n        </Row>\r\n      \r\n          </Form.Group>\r\n       </Col>\r\n      </Form>\r\n    )}\r\n\r\nexport default Register",["43","44"],"C:\\Users\\ooffe\\web\\WebProject\\client\\src\\components\\LogIn.js",["45","46"],"C:\\Users\\ooffe\\web\\WebProject\\client\\src\\components\\Todo.js",["47","48","49","50","51"],"import { Card, Form, Button,Container ,Row,Col,Badge,Alert,Tab,ListGroup,Accordion} from 'react-bootstrap'\r\nimport React, { useState } from 'react';\r\n\r\nfunction capitalizeFirstLetter(string) {\r\n  return string.charAt(0).toUpperCase() + string.slice(1)\r\n}\r\n\r\nconst SubTask=({ task, index,  markTask, removeTask })=> {\r\n\r\n    return (\r\n      <div>\r\n        <span style={{ textDecoration: task.isDone ? \"line-through\" : \"\" }}>{task.text}</span>\r\n        <div>  \r\n          <Button variant=\"outline-danger\" size=\"sm\"  className=\"float-right\" onClick={() => removeTask(index)}>Remove</Button>\r\n          <Button variant={ task.isDone ? \"success\" : \"outline-success \"}  size=\"sm\" className=\"float-right\" onClick={() => markTask(index)}>Done</Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\nconst Task=({ task, index,  markTask, removeTask,tasks,setTasks})=> {\r\n\r\n    const addsSubTask = text => {\r\n        const newSubtasks = [...(task.subTasks), { isDone: false,text:text }]\r\n        task.subTasks=newSubtasks\r\n        const newTasks=tasks\r\n        newTasks[index]=task\r\n        setTasks(newTasks)\r\n        //temp soul \r\n        markSubTask(0)\r\n        markSubTask(0)\r\n      }\r\n    const removeSubTask = subIndex => {\r\n        const newTask = [...(task.subTasks)]\r\n        newTask.splice(subIndex, 1);\r\n        task.subTasks=newTask;\r\n\r\n        const newTasks = [...tasks]\r\n        newTasks[index]=task\r\n        setTasks(newTasks)\r\n      }\r\n\r\n      const markSubTask = subIndex => {\r\n        const newTasks = [...tasks]\r\n        const newTask = [...(task.subTasks)]\r\n        if(newTask[subIndex].isDone == true)\r\n        {\r\n            newTask[subIndex].isDone =false\r\n        }\r\n        else\r\n        {\r\n            newTask[subIndex].isDone = true;\r\n        }\r\n        \r\n        newTasks[index]=task\r\n        setTasks(newTasks);\r\n      };\r\n    return (\r\n        <Accordion defaultActiveKey=\"0\">\r\n\r\n        <Card>\r\n          <Card.Header>\r\n            <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\" >\r\n            <div >\r\n                <div>\r\n                    <span  className=\"float-left\" style={{ textDecoration: task.isDone ? \"line-through\" : \"\" }}>{task.text}</span>\r\n                    \r\n                </div>\r\n            </div>\r\n            </Accordion.Toggle>\r\n                    <div>  \r\n                    <Button variant=\"outline-danger\" size=\"sm\"  className=\"float-right\" onClick={() => removeTask(index)}>Remove</Button>\r\n                    <Button variant={ task.isDone ? \"success\" : \"outline-success \"}  size=\"sm\" className=\"float-right\" onClick={() => markTask(index)}>Done</Button>\r\n                    </div>\r\n          </Card.Header>\r\n          <Accordion.Collapse eventKey=\"1\">\r\n            <Card.Body>\r\n     \r\n            <TaskAdder addTask={addsSubTask}size={\"sm\"} name={\"sub task\"} />\r\n                {(task.subTasks).map((subTask,index) => {\r\n                   return(\r\n                       <Card>\r\n                        <SubTask \r\n                        key={index}\r\n                        index={index}\r\n                        task={subTask}\r\n                        markTask={markSubTask}\r\n                        removeTask={removeSubTask}/>\r\n                        </Card>\r\n                    )\r\n                    }\r\n                )}\r\n            \r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </Card>\r\n      </Accordion>\r\n    );\r\n  }\r\n\r\n\r\n\r\n  const TaskAdder=({ addTask,size,name }) =>{\r\n    const [value, setValue] = useState(\"\");\r\n    const handleSubmit = event => {\r\n        event.preventDefault();\r\n      if (!value) return;\r\n      addTask(value);\r\n      setValue(\"\");\r\n    };\r\n  \r\n    return (\r\n      <Form onSubmit={handleSubmit} > \r\n      <Form.Group>\r\n        <Form.Control type=\"text\" className=\"input\" value={value} onChange={e => setValue(e.target.value)} placeholder={`Add new ${name}`} />\r\n      </Form.Group >\r\n      <Form.Group >\r\n        <Button   variant=\"primary\" type=\"Add\"className=\"float\" size={size} block>\r\n            Add\r\n        </Button>\r\n        </Form.Group >\r\n        <Form.Group>\r\n        <Form.Label>\r\n          <b>{`${capitalizeFirstLetter(name)}s:`}</b>\r\n          </Form.Label>\r\n        </Form.Group>\r\n    </Form>\r\n    );\r\n  }\r\n\r\nconst ToDo =({inputList})=> {\r\n\r\n    const [tasks, setTasks] = useState(inputList.tasks);\r\n    \r\n      const addTask = text => {\r\n        const newTasks = [...tasks, { isDone: false,text:text,subTasks:[] }];\r\n        setTasks(newTasks);\r\n      };\r\n    \r\n      const markTask = index => {\r\n        const newTasks = [...tasks];\r\n        if(newTasks[index].isDone == true)\r\n        {\r\n            newTasks[index].isDone =false\r\n        }\r\n        else\r\n        {\r\n            newTasks[index].isDone = true;\r\n        }\r\n        \r\n        setTasks(newTasks);\r\n      };\r\n    \r\n      const removeTask = index => {\r\n        const newTask = [...tasks];\r\n        newTask.splice(index, 1);\r\n        setTasks(newTask);\r\n      };\r\n\r\n    \r\n    return (\r\n    <div >\r\n        <h1 >{inputList.name}</h1>\r\n        <TaskAdder addTask={addTask}size={\"lg\"} name={\"task\"} />\r\n        <div>\r\n          {tasks.map((task, index) => (\r\n            <Card>\r\n              <Card.Body>\r\n                <Task\r\n                key={index}\r\n                index={index}\r\n                task={task}\r\n                markTask={markTask}\r\n                removeTask={removeTask}\r\n                tasks={tasks} \r\n                setTasks={setTasks}\r\n                />\r\n              </Card.Body>\r\n            </Card>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n\r\n\r\n  const suBatask={isDone: true,text:\"suBatask\"}\r\n  const suBatask2={isDone: false,text:\"suBatask2\"}\r\n  const suBatask3={isDone: false,text:\"suBatask3\"}\r\n\r\n  const atask={isDone: false,text:\"atask\",subTasks:[suBatask,suBatask2,suBatask3]}\r\n  const List = {name:\"ListName\", tasks:[atask,atask]}\r\n  \r\n\r\nconst ToDoContainer = ({InputLists}) => {\r\n  JSON.parse(JSON.stringify(List))\r\n    InputLists=[List,List,List]\r\n    //creates deep copys\r\n    InputLists=[JSON.parse(JSON.stringify(List)),JSON.parse(JSON.stringify(List)),JSON.parse(JSON.stringify(List))]\r\n    const [Lists, setLists] = useState(InputLists);\r\n\r\n    const addList = text => {\r\n      const newList = [...Lists, {name:text, tasks:[]}];\r\n      setLists(newList);\r\n    };\r\n\r\n    return (\r\n<Tab.Container id=\"list-group-tabs-example\" defaultActiveKey=\"#link1\">\r\n  <Row>\r\n    <Col sm={4}>\r\n      <ListGroup>\r\n      <TaskAdder addTask={addList}size={\"sm\"} name={\"list\"}/>\r\n        {Lists.map((list,index) => <ListGroup.Item action href={`#${list.name}_${index}`}> {`${list.name}`} </ListGroup.Item>)}\r\n        \r\n      </ListGroup>\r\n    </Col>\r\n    <Col sm={8}>\r\n      <Tab.Content>\r\n        \r\n        {Lists.map((list,index) => {\r\n        return(<Tab.Pane eventKey={`#${list.name}_${index}`}>\r\n             <ToDo inputList={list}/>\r\n            </Tab.Pane>)\r\n        })}\r\n        \r\n      </Tab.Content>\r\n    </Col>\r\n  </Row>\r\n</Tab.Container>\r\n      \r\n  )}\r\n\r\n  \r\n\r\n  export default ToDoContainer","C:\\Users\\ooffe\\web\\WebProject\\client\\src\\services\\serverCom.js",[],"C:\\Users\\ooffe\\web\\WebProject\\client\\src\\components\\Navigator.js",["52","53","54","55"],"import {  Navbar, Nav,NavDropdown ,Form,FormControl,Button} from 'react-bootstrap'\r\nimport { useHistory } from \"react-router-dom\";\r\nimport React, { useState } from 'react';\r\nexport let SetUser\r\nlet history = null\r\nconst Navigator = () => {\r\n  let History = useHistory()\r\n    history= History\r\n    // ...\r\n    const [user, setUser] = useState({name:\"guest\",isLog:false});\r\n    \r\n    SetUser=setUser\r\n    let dropDown=null;\r\n    \r\n    if (!user.isLog){\r\n      dropDown=<NavDropdown title={user.name} id=\"basic-nav-dropdown\">\r\n              <NavDropdown.Item onClick={()=>{History.replace(\"/Register\")}}>Register</NavDropdown.Item>\r\n              <NavDropdown.Item onClick={()=>{History.replace(\"/LogIn\")}}>LogIn</NavDropdown.Item>\r\n        <NavDropdown.Divider />\r\n      </NavDropdown>\r\n    }else{\r\n      dropDown=<NavDropdown title={user.name} id=\"basic-nav-dropdown\">\r\n         <NavDropdown.Item onClick={()=>{setUser({name:\"guest\",isLog:false}); History.replace(\"/Home\")}}>Logout</NavDropdown.Item>\r\n        <NavDropdown.Divider />\r\n        <NavDropdown.Item onClick={()=>{History.replace(\"/ToDo\")}}>To Do List</NavDropdown.Item>\r\n      </NavDropdown>\r\n    }\r\n     \r\n    return (\r\n<Navbar bg=\"light\" expand=\"lg\">\r\n  <Navbar.Brand onClick={()=>{History.replace(\"/Home\")}}>ToDo</Navbar.Brand>\r\n  <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n  <Navbar.Collapse id=\"basic-navbar-nav\">\r\n    <Nav className=\"mr-auto\">\r\n    <Nav.Link onClick={()=>{History.replace(\"/Home\")}}>Home</Nav.Link>\r\n      {dropDown}\r\n    </Nav>\r\n  </Navbar.Collapse>\r\n</Navbar>\r\n    )}\r\nexport default Navigator\r\n","C:\\Users\\ooffe\\web\\WebProject\\client\\src\\components\\Home.js",[],{"ruleId":"56","severity":1,"message":"57","line":7,"column":10,"nodeType":"58","messageId":"59","endLine":7,"endColumn":20},{"ruleId":"56","severity":1,"message":"60","line":13,"column":3,"nodeType":"58","messageId":"59","endLine":13,"endColumn":7},{"ruleId":"56","severity":1,"message":"61","line":1,"column":24,"nodeType":"58","messageId":"59","endLine":1,"endColumn":33},{"ruleId":"56","severity":1,"message":"62","line":1,"column":43,"nodeType":"58","messageId":"59","endLine":1,"endColumn":48},{"ruleId":"56","severity":1,"message":"63","line":10,"column":5,"nodeType":"58","messageId":"59","endLine":10,"endColumn":12},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"56","severity":1,"message":"61","line":1,"column":24,"nodeType":"58","messageId":"59","endLine":1,"endColumn":33},{"ruleId":"56","severity":1,"message":"62","line":1,"column":43,"nodeType":"58","messageId":"59","endLine":1,"endColumn":48},{"ruleId":"56","severity":1,"message":"61","line":1,"column":29,"nodeType":"58","messageId":"59","endLine":1,"endColumn":38},{"ruleId":"56","severity":1,"message":"62","line":1,"column":48,"nodeType":"58","messageId":"59","endLine":1,"endColumn":53},{"ruleId":"56","severity":1,"message":"68","line":1,"column":54,"nodeType":"58","messageId":"59","endLine":1,"endColumn":59},{"ruleId":"69","severity":1,"message":"70","line":45,"column":37,"nodeType":"71","messageId":"72","endLine":45,"endColumn":39},{"ruleId":"69","severity":1,"message":"70","line":141,"column":35,"nodeType":"71","messageId":"72","endLine":141,"endColumn":37},{"ruleId":"56","severity":1,"message":"73","line":1,"column":36,"nodeType":"58","messageId":"59","endLine":1,"endColumn":40},{"ruleId":"56","severity":1,"message":"74","line":1,"column":41,"nodeType":"58","messageId":"59","endLine":1,"endColumn":52},{"ruleId":"56","severity":1,"message":"75","line":1,"column":53,"nodeType":"58","messageId":"59","endLine":1,"endColumn":59},{"ruleId":"56","severity":1,"message":"63","line":5,"column":5,"nodeType":"58","messageId":"59","endLine":5,"endColumn":12},"no-unused-vars","'useHistory' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'Container' is defined but never used.","'Badge' is defined but never used.","'history' is assigned a value but never used.","no-native-reassign",["76"],"no-negated-in-lhs",["77"],"'Alert' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Form' is defined but never used.","'FormControl' is defined but never used.","'Button' is defined but never used.","no-global-assign","no-unsafe-negation"]