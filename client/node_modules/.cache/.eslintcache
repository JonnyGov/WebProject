[{"C:\\Users\\Yonathan\\Documents\\GitHub\\create-react-app\\part1\\src\\index.js":"1","C:\\Users\\Yonathan\\Documents\\GitHub\\create-react-app\\part1\\src\\App.js":"2","C:\\Users\\Yonathan\\Documents\\GitHub\\WebProject\\client\\src\\index.js":"3","C:\\Users\\Yonathan\\Documents\\GitHub\\WebProject\\client\\src\\App.js":"4","C:\\Users\\Yonathan\\Documents\\GitHub\\WebProject\\client\\src\\components\\LogIn.js":"5","C:\\Users\\Yonathan\\Documents\\GitHub\\WebProject\\client\\src\\services\\serverCom.js":"6","C:\\Users\\Yonathan\\Documents\\GitHub\\WebProject\\client\\src\\components\\Todo.js":"7","C:\\Users\\Yonathan\\Documents\\GitHub\\WebProject\\client\\src\\components\\Register.js":"8"},{"size":549,"mtime":1624467995609,"results":"9","hashOfConfig":"10"},{"size":255,"mtime":1624468158767,"results":"11","hashOfConfig":"10"},{"size":125,"mtime":1624887446540,"results":"12","hashOfConfig":"13"},{"size":1123,"mtime":1624990712203,"results":"14","hashOfConfig":"13"},{"size":2399,"mtime":1624991814442,"results":"15","hashOfConfig":"13"},{"size":964,"mtime":1625501987591,"results":"16","hashOfConfig":"13"},{"size":6640,"mtime":1625499183814,"results":"17","hashOfConfig":"13"},{"size":3302,"mtime":1625502993004,"results":"18","hashOfConfig":"13"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ti4lqy",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"w2lm3w",{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"25"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"25"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"25"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Yonathan\\Documents\\GitHub\\create-react-app\\part1\\src\\index.js",[],"C:\\Users\\Yonathan\\Documents\\GitHub\\create-react-app\\part1\\src\\App.js",[],"C:\\Users\\Yonathan\\Documents\\GitHub\\WebProject\\client\\src\\index.js",[],["39","40"],"C:\\Users\\Yonathan\\Documents\\GitHub\\WebProject\\client\\src\\App.js",["41","42"],"//import React from 'react'\nimport Login from './components/LogIn'\nimport Register from './components/Register'\nimport ToDoContainer from './components/Todo'\nimport { useHistory } from \"react-router-dom\";\nimport React, { useState } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect\n} from \"react-router-dom\";\n\n\n\n\nconst App = (props) => {\n  const [Authenticated, setAuthenticated] = useState(false);\n\n  function requireAuth ()\n  {\n    if(Authenticated){ \n      return (\n    <div  className=\"centerLarge\" >\n      <ToDoContainer/>\n      </div>\n\n      )\n    }\n    else\n    {\n      return <Redirect to=\"/\"/>\n    }\n  }\n\n  return(\n\n    <div >\n    <Router>    \n        <Switch>\n          <Route exact path=\"/\">\n          <div  className=\"center\" >\n            <Login setAuto={setAuthenticated}/>\n            </div>\n          </Route>  \n          <Route path=\"/ToDo\" render={requireAuth}></Route>\n        <div className=\"center\">\n        <Route path=\"/Register\" render={()=>{return(<Register/>)}}></Route>\n        </div>\n      </Switch>\n    </Router>  \n    </div>\n    )\n  \n}\n\nexport default App","C:\\Users\\Yonathan\\Documents\\GitHub\\WebProject\\client\\src\\components\\LogIn.js",["43","44"],"import {  Form, Button,Container ,Row,Col,Badge,Alert} from 'react-bootstrap'\r\nimport React, { useState } from 'react'\r\nimport { useHistory } from \"react-router-dom\";\r\nconst sc=require(\"../services/serverCom.js\");\r\n\r\nvar setNotefunc=()=>{}\r\nvar setAutofunc=()=>{}\r\n\r\nvar history=null\r\nconst onSuccess=()=>\r\n{\r\n  console.log(\"LogIn: onSuccess\")\r\n  setAutofunc(true)\r\n  history.push(\"/ToDo\")\r\n}\r\n\r\nconst onFailure=()=>\r\n{\r\n  console.log(onFailure)\r\n  setNotefunc(true)\r\n}\r\n\r\nconst onSubmit=(event)=>\r\n{\r\n  event.preventDefault();\r\n  \r\n  const form = event.currentTarget\r\n  console.log(\"formGridUserName\")\r\n  console.log(form.formGridUserName.value)\r\n\r\n  console.log(\"formGridPassword\")\r\n  console.log(form.formGridPassword.value)\r\n\r\n  const username=form.formGridUserName.value\r\n  const password=form.formGridPassword.value\r\n\r\n  \r\n  sc.signIn(username,password,onSuccess,onFailure)\r\n\r\n\r\n  form.formGridUserName.value=\"\"\r\n  form.formGridPassword.value=\"\"\r\n  \r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst LogIn = ({ setAuto }) => {\r\n    // ...\r\n    let History = useHistory()\r\n    history=History\r\n    const [show, setShow] = useState(false);\r\n    setNotefunc=setShow\r\n    setAutofunc=setAuto\r\n    return (\r\n<Form onSubmit={onSubmit} >\r\n  <h1>\r\n  Log In\r\n  </h1>\r\n  <Alert show={show} variant=\"warning\">\r\n        <Alert.Heading>Log in failed</Alert.Heading>\r\n        <p>\r\n         username or password incorrect\r\n        </p>\r\n        <hr />\r\n        <div className=\"d-flex justify-content-end\">\r\n          <Button onClick={() => setShow(false)} variant=\"outline-warning\">\r\n            Close\r\n          </Button>\r\n        </div>\r\n      </Alert>\r\n  <Col>\r\n    <Form.Group   controlId=\"formGridUserName\">\r\n      <Form.Label>Username</Form.Label>\r\n      <Form.Control type=\"username\" placeholder=\"Enter username\" />\r\n    </Form.Group>\r\n\r\n    <Form.Group   controlId=\"formGridPassword\">\r\n      <Form.Label>Password</Form.Label>\r\n      <Form.Control type=\"password\" placeholder=\"Password\" />\r\n    </Form.Group>\r\n  </Col>\r\n<Col>\r\n  <Form.Group  controlId=\"button\" >\r\n  <Row>\r\n      <Col sm={4}>\r\n          <Button type=\"submit\" block>Sign in</Button>\r\n         \r\n      </Col>\r\n      <Col sm={4}>\r\n      </Col>\r\n      <Col sm={4} className=\"float-left\">\r\n      <Button  onClick={()=>{history.push(\"/Register\")}} >Register</Button>\r\n      </Col>\r\n  </Row>\r\n\r\n    </Form.Group>\r\n </Col>\r\n</Form>\r\n      \r\n  )}\r\n\r\n\r\n  export default LogIn","C:\\Users\\Yonathan\\Documents\\GitHub\\WebProject\\client\\src\\services\\serverCom.js",[],"C:\\Users\\Yonathan\\Documents\\GitHub\\WebProject\\client\\src\\components\\Todo.js",["45","46","47","48","49","50"],"import { Card, Form, Button,Container ,Row,Col,Badge,Alert,Tab,ListGroup,Accordion} from 'react-bootstrap'\r\nimport React, { useState } from 'react';\r\n\r\n\r\nconst SubTask=({ task, index,  markTask, removeTask })=> {\r\n\r\n    return (\r\n      <div>\r\n        <span style={{ textDecoration: task.isDone ? \"line-through\" : \"\" }}>{task.text}</span>\r\n        <div>  \r\n          <Button variant=\"outline-danger\" size=\"sm\"  className=\"float-right\" onClick={() => removeTask(index)}>Remove</Button>\r\n          <Button variant={ task.isDone ? \"success\" : \"outline-success \"}  size=\"sm\" className=\"float-right\" onClick={() => markTask(index)}>Done</Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\nconst Task=({ task, index,  markTask, removeTask,tasks,setTasks})=> {\r\n\r\n    const addsSubTask = text => {\r\n        const newSubtasks = [...(task.subTasks), { isDone: false,text:text }]\r\n        task.subTasks=newSubtasks\r\n        const newTasks=tasks\r\n        newTasks[index]=task\r\n        setTasks(newTasks)\r\n        //temp soul \r\n        markSubTask(0)\r\n        markSubTask(0)\r\n      }\r\n    const removeSubTask = subIndex => {\r\n        const newTask = [...(task.subTasks)]\r\n        newTask.splice(subIndex, 1);\r\n        task.subTasks=newTask;\r\n\r\n        const newTasks = [...tasks]\r\n        newTasks[index]=task\r\n        setTasks(newTasks)\r\n      }\r\n\r\n      const markSubTask = subIndex => {\r\n        const newTasks = [...tasks]\r\n        const newTask = [...(task.subTasks)]\r\n        if(newTask[subIndex].isDone == true)\r\n        {\r\n            newTask[subIndex].isDone =false\r\n        }\r\n        else\r\n        {\r\n            newTask[subIndex].isDone = true;\r\n        }\r\n        \r\n        newTasks[index]=task\r\n        setTasks(newTasks);\r\n      };\r\n    return (\r\n        <Accordion defaultActiveKey=\"0\">\r\n\r\n        <Card>\r\n          <Card.Header>\r\n            <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\" >\r\n            <div >\r\n                <div>\r\n                    <span  className=\"float-left\" style={{ textDecoration: task.isDone ? \"line-through\" : \"\" }}>{task.text}</span>\r\n                    \r\n                </div>\r\n            </div>\r\n            </Accordion.Toggle>\r\n                    <div>  \r\n                    <Button variant=\"outline-danger\" size=\"sm\"  className=\"float-right\" onClick={() => removeTask(index)}>Remove</Button>\r\n                    <Button variant={ task.isDone ? \"success\" : \"outline-success \"}  size=\"sm\" className=\"float-right\" onClick={() => markTask(index)}>Done</Button>\r\n                    </div>\r\n          </Card.Header>\r\n          <Accordion.Collapse eventKey=\"1\">\r\n            <Card.Body>\r\n     \r\n            <TaskAdder addTask={addsSubTask}size={\"sm\"} />\r\n                {(task.subTasks).map((subTask,index) => {\r\n                   return(\r\n                       <Card>\r\n                        <SubTask \r\n                        key={index}\r\n                        index={index}\r\n                        task={subTask}\r\n                        markTask={markSubTask}\r\n                        removeTask={removeSubTask}/>\r\n                        </Card>\r\n                    )\r\n                    }\r\n                )}\r\n            \r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </Card>\r\n      </Accordion>\r\n    );\r\n  }\r\n\r\n\r\n\r\n  const TaskAdder=({ addTask,size }) =>{\r\n    const [value, setValue] = useState(\"\");\r\n    const handleSubmit = event => {\r\n        event.preventDefault();\r\n      if (!value) return;\r\n      addTask(value);\r\n      setValue(\"\");\r\n    };\r\n  \r\n    return (\r\n      <Form onSubmit={handleSubmit} > \r\n      <Form.Group>\r\n        <Form.Control type=\"text\" className=\"input\" value={value} onChange={e => setValue(e.target.value)} placeholder=\"Add new task\" />\r\n      </Form.Group >\r\n      <Form.Group >\r\n        <Button   variant=\"primary\" type=\"Add\"className=\"float\" size={size} block>\r\n            Add\r\n        </Button>\r\n        </Form.Group >\r\n        <Form.Group>\r\n        <Form.Label><b>Tasks:</b></Form.Label>\r\n        </Form.Group>\r\n    </Form>\r\n    );\r\n  }\r\n\r\nconst ToDo =({inputList})=> {\r\n\r\n    const [tasks, setTasks] = useState(inputList.tasks);\r\n    \r\n      const addTask = text => {\r\n        const newTasks = [...tasks, { isDone: false,text:text,subTasks:[] }];\r\n        setTasks(newTasks);\r\n      };\r\n    \r\n      const markTask = index => {\r\n        const newTasks = [...tasks];\r\n        if(newTasks[index].isDone == true)\r\n        {\r\n            newTasks[index].isDone =false\r\n        }\r\n        else\r\n        {\r\n            newTasks[index].isDone = true;\r\n        }\r\n        \r\n        setTasks(newTasks);\r\n      };\r\n    \r\n      const removeTask = index => {\r\n        const newTask = [...tasks];\r\n        newTask.splice(index, 1);\r\n        setTasks(newTask);\r\n      };\r\n\r\n    \r\n    return (\r\n    <div >\r\n        <h1 >{inputList.name}</h1>\r\n        <TaskAdder addTask={addTask}size={\"lg\"} />\r\n        <div>\r\n          {tasks.map((task, index) => (\r\n            <Card>\r\n              <Card.Body>\r\n                <Task\r\n                key={index}\r\n                index={index}\r\n                task={task}\r\n                markTask={markTask}\r\n                removeTask={removeTask}\r\n                tasks={tasks} \r\n                setTasks={setTasks}\r\n                />\r\n              </Card.Body>\r\n            </Card>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n\r\n\r\n  const suBatask={isDone: true,text:\"suBatask\"}\r\n  const suBatask2={isDone: false,text:\"suBatask2\"}\r\n  const suBatask3={isDone: false,text:\"suBatask3\"}\r\n\r\n  const atask={isDone: false,text:\"atask\",subTasks:[suBatask,suBatask2,suBatask3]}\r\n  const List = {name:\"ListName\", tasks:[atask,atask]}\r\n  \r\n\r\nconst ToDoContainer = ({InputLists}) => {\r\n  JSON.parse(JSON.stringify(List))\r\n    InputLists=[List,List,List]\r\n    //creates deep copys\r\n    InputLists=[JSON.parse(JSON.stringify(List)),JSON.parse(JSON.stringify(List)),JSON.parse(JSON.stringify(List))]\r\n\r\n    const [Lists, setTasks] = useState(InputLists);\r\n    return (\r\n<Tab.Container id=\"list-group-tabs-example\" defaultActiveKey=\"#link1\">\r\n  <Row>\r\n    <Col sm={4}>\r\n      <ListGroup>\r\n        {Lists.map((list,index) => <ListGroup.Item action href={`#${list.name}_${index}`}> {`${list.name}`} </ListGroup.Item>)}\r\n      </ListGroup>\r\n    </Col>\r\n    <Col sm={8}>\r\n      <Tab.Content>\r\n\r\n        {Lists.map((list,index) => {\r\n        return(<Tab.Pane eventKey={`#${list.name}_${index}`}>\r\n             <ToDo inputList={list}/>\r\n            </Tab.Pane>)\r\n        })}\r\n      </Tab.Content>\r\n    </Col>\r\n  </Row>\r\n</Tab.Container>\r\n      \r\n  )}\r\n\r\n  \r\n\r\n  export default ToDoContainer","C:\\Users\\Yonathan\\Documents\\GitHub\\WebProject\\client\\src\\components\\Register.js",["51","52","53"],{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":5,"column":10,"nodeType":"60","messageId":"61","endLine":5,"endColumn":20},{"ruleId":"58","severity":1,"message":"62","line":11,"column":3,"nodeType":"60","messageId":"61","endLine":11,"endColumn":7},{"ruleId":"58","severity":1,"message":"63","line":1,"column":24,"nodeType":"60","messageId":"61","endLine":1,"endColumn":33},{"ruleId":"58","severity":1,"message":"64","line":1,"column":43,"nodeType":"60","messageId":"61","endLine":1,"endColumn":48},{"ruleId":"58","severity":1,"message":"63","line":1,"column":29,"nodeType":"60","messageId":"61","endLine":1,"endColumn":38},{"ruleId":"58","severity":1,"message":"64","line":1,"column":48,"nodeType":"60","messageId":"61","endLine":1,"endColumn":53},{"ruleId":"58","severity":1,"message":"65","line":1,"column":54,"nodeType":"60","messageId":"61","endLine":1,"endColumn":59},{"ruleId":"66","severity":1,"message":"67","line":42,"column":37,"nodeType":"68","messageId":"69","endLine":42,"endColumn":39},{"ruleId":"66","severity":1,"message":"67","line":136,"column":35,"nodeType":"68","messageId":"69","endLine":136,"endColumn":37},{"ruleId":"58","severity":1,"message":"70","line":196,"column":19,"nodeType":"60","messageId":"61","endLine":196,"endColumn":27},{"ruleId":"58","severity":1,"message":"63","line":1,"column":24,"nodeType":"60","messageId":"61","endLine":1,"endColumn":33},{"ruleId":"58","severity":1,"message":"64","line":1,"column":43,"nodeType":"60","messageId":"61","endLine":1,"endColumn":48},{"ruleId":"58","severity":1,"message":"71","line":10,"column":5,"nodeType":"60","messageId":"61","endLine":10,"endColumn":12},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],"no-unused-vars","'useHistory' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'Container' is defined but never used.","'Badge' is defined but never used.","'Alert' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'setTasks' is assigned a value but never used.","'history' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]