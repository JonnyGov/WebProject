[{"C:\\Users\\Yonathan\\Documents\\GitHub\\WebProject\\client\\src\\index.js":"1","C:\\Users\\Yonathan\\Documents\\GitHub\\WebProject\\client\\src\\App.js":"2","C:\\Users\\Yonathan\\Documents\\GitHub\\WebProject\\client\\src\\components\\Home.js":"3","C:\\Users\\Yonathan\\Documents\\GitHub\\WebProject\\client\\src\\components\\Navigator.js":"4","C:\\Users\\Yonathan\\Documents\\GitHub\\WebProject\\client\\src\\components\\LogIn.js":"5","C:\\Users\\Yonathan\\Documents\\GitHub\\WebProject\\client\\src\\components\\Register.js":"6","C:\\Users\\Yonathan\\Documents\\GitHub\\WebProject\\client\\src\\components\\Todo.js":"7","C:\\Users\\Yonathan\\Documents\\GitHub\\WebProject\\client\\src\\services\\serverCom.js":"8"},{"size":125,"mtime":1624887446540,"results":"9","hashOfConfig":"10"},{"size":1457,"mtime":1625587639585,"results":"11","hashOfConfig":"10"},{"size":245,"mtime":1625551965847,"results":"12","hashOfConfig":"10"},{"size":1590,"mtime":1625587814304,"results":"13","hashOfConfig":"10"},{"size":2399,"mtime":1625573400675,"results":"14","hashOfConfig":"10"},{"size":3302,"mtime":1625502993004,"results":"15","hashOfConfig":"10"},{"size":10283,"mtime":1625587483929,"results":"16","hashOfConfig":"10"},{"size":1152,"mtime":1625585809668,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"w2lm3w",{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"20"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\Users\\Yonathan\\Documents\\GitHub\\WebProject\\client\\src\\index.js",[],["38","39"],"C:\\Users\\Yonathan\\Documents\\GitHub\\WebProject\\client\\src\\App.js",["40","41"],"C:\\Users\\Yonathan\\Documents\\GitHub\\WebProject\\client\\src\\components\\Home.js",[],"C:\\Users\\Yonathan\\Documents\\GitHub\\WebProject\\client\\src\\components\\Navigator.js",["42","43","44","45"],"C:\\Users\\Yonathan\\Documents\\GitHub\\WebProject\\client\\src\\components\\LogIn.js",["46","47"],"import {  Form, Button,Container ,Row,Col,Badge,Alert} from 'react-bootstrap'\r\nimport React, { useState } from 'react'\r\nimport { useHistory } from \"react-router-dom\";\r\nconst sc=require(\"../services/serverCom.js\");\r\n\r\nvar setNotefunc=()=>{}\r\nvar setAutofunc=()=>{}\r\n\r\nvar history=null\r\nconst onSuccess=()=>\r\n{\r\n  console.log(\"LogIn: onSuccess\")\r\n  setAutofunc(true)\r\n  history.push(\"/ToDo\")\r\n}\r\n\r\nconst onFailure=()=>\r\n{\r\n  console.log(onFailure)\r\n  setNotefunc(true)\r\n}\r\n\r\nconst onSubmit=(event)=>\r\n{\r\n  event.preventDefault();\r\n  \r\n  const form = event.currentTarget\r\n  console.log(\"formGridUserName\")\r\n  console.log(form.formGridUserName.value)\r\n\r\n  console.log(\"formGridPassword\")\r\n  console.log(form.formGridPassword.value)\r\n\r\n  const username=form.formGridUserName.value\r\n  const password=form.formGridPassword.value\r\n\r\n  \r\n  sc.signIn(username,password,onSuccess,onFailure)\r\n\r\n\r\n  form.formGridUserName.value=\"\"\r\n  form.formGridPassword.value=\"\"\r\n  \r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst LogIn = ({ setAuto }) => {\r\n    // ...\r\n    let History = useHistory()\r\n    history=History\r\n    const [show, setShow] = useState(false);\r\n    setNotefunc=setShow\r\n    setAutofunc=setAuto\r\n    return (\r\n<Form onSubmit={onSubmit} >\r\n  <h1>\r\n  Log In\r\n  </h1>\r\n  <Alert show={show} variant=\"warning\">\r\n        <Alert.Heading>Log in failed</Alert.Heading>\r\n        <p>\r\n         username or password incorrect\r\n        </p>\r\n        <hr />\r\n        <div className=\"d-flex justify-content-end\">\r\n          <Button onClick={() => setShow(false)} variant=\"outline-warning\">\r\n            Close\r\n          </Button>\r\n        </div>\r\n      </Alert>\r\n  <Col>\r\n    <Form.Group   controlId=\"formGridUserName\">\r\n      <Form.Label>Username</Form.Label>\r\n      <Form.Control type=\"username\" placeholder=\"Enter username\" />\r\n    </Form.Group>\r\n\r\n    <Form.Group   controlId=\"formGridPassword\">\r\n      <Form.Label>Password</Form.Label>\r\n      <Form.Control type=\"password\" placeholder=\"Password\" />\r\n    </Form.Group>\r\n  </Col>\r\n<Col>\r\n  <Form.Group  controlId=\"button\" >\r\n  <Row>\r\n      <Col sm={4}>\r\n          <Button type=\"submit\" block>Sign in</Button>\r\n         \r\n      </Col>\r\n      <Col sm={4}>\r\n      </Col>\r\n      <Col sm={4} className=\"float-left\">\r\n      <Button  onClick={()=>{history.push(\"/Register\")}} >Register</Button>\r\n      </Col>\r\n  </Row>\r\n\r\n    </Form.Group>\r\n </Col>\r\n</Form>\r\n      \r\n  )}\r\n\r\n\r\n  export default LogIn","C:\\Users\\Yonathan\\Documents\\GitHub\\WebProject\\client\\src\\components\\Register.js",["48","49","50"],"import {  Form, Button,Container ,Row,Col,Badge,Alert} from 'react-bootstrap'\r\nimport React, { useState } from 'react'\r\nimport { useHistory } from \"react-router-dom\";\r\nconst sc=require(\"../services/serverCom.js\");\r\n\r\nvar setNotefunc=()=>{}\r\nvar setNoteTextfunc=()=>{}\r\nvar setNoteVarfunc=()=>{}\r\n\r\nvar history=null\r\n\r\nconst onSuccess=()=>\r\n{\r\n  console.log(\"onSuccess\")\r\n  setNoteVarfunc(\"success\")\r\n  setNoteTextfunc(\"Registerd successfuly\")\r\n  setNotefunc(true)\r\n}\r\n\r\nconst onFailure=()=>\r\n{\r\n  console.log(\"onFailure\")\r\n  setNoteVarfunc(\"warning\")\r\n  setNoteTextfunc(\"User exists\")\r\n  setNotefunc(true)\r\n}\r\n\r\n\r\nvar onSubmit=(event)=>{\r\n\r\n\r\n  event.preventDefault();\r\n  \r\n  const form = event.currentTarget\r\n  console.log(\"formGridUserName\")\r\n  console.log(form.formGridUserName.value)\r\n\r\n  console.log(\"formGridPassword\")\r\n  console.log(form.formGridPassword.value)\r\n\r\n  console.log(\"formGridPasswordAgain\")\r\n  console.log(form.formGridPasswordAgain.value)\r\n\r\n  const username=form.formGridUserName.value\r\n  const password=form.formGridPassword.value\r\n  const PasswordAgain=form.formGridPasswordAgain.value\r\n  if(password!==PasswordAgain){\r\n    setNoteTextfunc(\"Passwords dont match\")\r\n    setNoteVarfunc(\"warning\")\r\n    setNotefunc(true)\r\n    return\r\n  }\r\n  sc.register(username,password,onSuccess,onFailure)\r\n\r\n\r\n}\r\n\r\nconst Register = ({ setAuto }) => {\r\n    let History = useHistory()\r\n    history=History\r\n    const [show, setShow] = useState(false);\r\n    const [notificationText,setNotificationText]=useState(\"empty\")\r\n    const [notificationVariant,setNotificationVariant]=useState(\"warning\")\r\n    setNotefunc=setShow\r\n    setNoteTextfunc=setNotificationText\r\n    setNoteVarfunc=setNotificationVariant\r\n    return (\r\n        <Form onSubmit={onSubmit}  >\r\n        <h1 >\r\n        Register\r\n        </h1>\r\n\r\n        <Alert show={show} variant={`${notificationVariant}`} >\r\n              <Alert.Heading>Registration info</Alert.Heading>\r\n              <p>\r\n                {notificationText}\r\n              </p>\r\n              <hr />\r\n              <div className=\"d-flex justify-content-end\">\r\n                <Button onClick={() => setShow(false)} variant=\"outline-warning\">\r\n                  Close\r\n                </Button>\r\n              </div>\r\n            </Alert>\r\n        <Col>\r\n          <Form.Group   controlId=\"formGridUserName\">\r\n            <Form.Label>Username</Form.Label>\r\n            <Form.Control type=\"username\" placeholder=\"Chose your username\" />\r\n          </Form.Group>\r\n      \r\n          <Form.Group   controlId=\"formGridPassword\">\r\n            <Form.Label>Password</Form.Label>\r\n            <Form.Control type=\"password\" placeholder=\"Chose your password\" />\r\n          </Form.Group>\r\n          <Form.Group   controlId=\"formGridPasswordAgain\">\r\n            <Form.Label>Rewrite Password</Form.Label>\r\n            <Form.Control type=\"password\" placeholder=\"Rewrite the chosen password , please avoid useing copy paste\" />\r\n          </Form.Group>\r\n        </Col>\r\n      <Col>\r\n        <Form.Group  controlId=\"button\" >\r\n        <Row>\r\n            <Col md={4}>\r\n                <Button type=\"submit\" block>Register</Button>\r\n               \r\n            </Col>\r\n        </Row>\r\n      \r\n          </Form.Group>\r\n       </Col>\r\n      </Form>\r\n    )}\r\n\r\nexport default Register","C:\\Users\\Yonathan\\Documents\\GitHub\\WebProject\\client\\src\\components\\Todo.js",["51","52","53","54","55","56","57"],"import { Card, Form, Button,Container ,Row,Col,Badge,Alert,Tab,ListGroup,Accordion} from 'react-bootstrap'\r\nimport React, { useState } from 'react';\r\n\r\n\r\nfunction capitalizeFirstLetter(string) {\r\n  return string.charAt(0).toUpperCase() + string.slice(1)\r\n}\r\n\r\nconst SubTask=({ task, index,  markTask, removeTask })=> {\r\n\r\n    return (\r\n      <div>\r\n        <span style={{ textDecoration: task.isDone ? \"line-through\" : \"\" }}>{task.text}</span>\r\n        <div>  \r\n          <Button variant=\"outline-danger\" size=\"sm\"  className=\"float-right\" onClick={() => removeTask(index)}>Remove</Button>\r\n          <Button variant={ task.isDone ? \"success\" : \"outline-success \"}  size=\"sm\" className=\"float-right\" onClick={() => markTask(index)}>Done</Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\nconst Task=({ task, index,  markTask, removeTask,tasks,setTasks,showTaskDit})=> {\r\n\r\n    const addsSubTask = text => {\r\n        const newSubtasks = [...(task.subTasks), { isDone: false,text:text }]\r\n        task.subTasks=newSubtasks\r\n        const newTasks=tasks\r\n        newTasks[index]=task\r\n        setTasks(newTasks)\r\n        //temp soul \r\n        markSubTask(0)\r\n        markSubTask(0)\r\n      }\r\n    const removeSubTask = subIndex => {\r\n        const newTask = [...(task.subTasks)]\r\n        newTask.splice(subIndex, 1);\r\n        task.subTasks=newTask;\r\n\r\n        const newTasks = [...tasks]\r\n        newTasks[index]=task\r\n        setTasks(newTasks)\r\n      }\r\n\r\n      const markSubTask = subIndex => {\r\n        const newTasks = [...tasks]\r\n        const newTask = [...(task.subTasks)]\r\n        if(newTask[subIndex].isDone == true)\r\n        {\r\n            newTask[subIndex].isDone =false\r\n        }\r\n        else\r\n        {\r\n            newTask[subIndex].isDone = true;\r\n        }\r\n        \r\n        newTasks[index]=task\r\n        setTasks(newTasks);\r\n      }\r\n    return (\r\n        <Accordion defaultActiveKey=\"0\">\r\n\r\n        <Card>\r\n          <Card.Header>\r\n            <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\" >\r\n            <div >\r\n                <div>\r\n                    <span  className=\"float-left\" style={{ textDecoration: task.isDone ? \"line-through\" : \"\" }}>{task.text}</span>\r\n                    \r\n                </div>\r\n            </div>\r\n            </Accordion.Toggle>\r\n                    <div>  \r\n                    <Button variant=\"outline-danger\" size=\"sm\"  className=\"float-right\" onClick={() => removeTask(index)}>Remove</Button>\r\n                    <Button variant={ task.isDone ? \"success\" : \"outline-success \"}  size=\"sm\" className=\"float-right\" onClick={() => markTask(index)}>Done</Button>\r\n                    <Button variant=\"outline-info\" size=\"sm\"  className=\"float-left\" onClick={() => showTaskDit(true,task, index,tasks,setTasks) }>Details</Button>\r\n\r\n                    </div>\r\n          </Card.Header>\r\n          <Accordion.Collapse eventKey=\"1\">\r\n            <Card.Body>\r\n     \r\n            <TaskAdder addTask={addsSubTask}size={\"sm\"} name={\"sub task\"} />\r\n                {(task.subTasks).map((subTask,index) => {\r\n                   return(\r\n                       <Card>\r\n                        <SubTask \r\n                        key={index}\r\n                        index={index}\r\n                        task={subTask}\r\n                        markTask={markSubTask}\r\n                        removeTask={removeSubTask}/>\r\n                        </Card>\r\n                    )\r\n                    }\r\n                )}\r\n            \r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </Card>\r\n      </Accordion>\r\n    );\r\n  }\r\n\r\n\r\n\r\n  const TaskAdder=({ addTask,size,name }) =>{\r\n    const [value, setValue] = useState(\"\");\r\n    const handleSubmit = event => {\r\n        event.preventDefault();\r\n      if (!value) return;\r\n      addTask(value);\r\n      setValue(\"\");\r\n    };\r\n  \r\n    return (\r\n      <Form onSubmit={handleSubmit} > \r\n      <Form.Group>\r\n        <Form.Control type=\"text\" className=\"input\" value={value} onChange={e => setValue(e.target.value)} placeholder={`Add new ${name}`} />\r\n      </Form.Group >\r\n      <Form.Group >\r\n        <Button   variant=\"primary\" type=\"Add\"className=\"float\" size={size} block>\r\n            Add\r\n        </Button>\r\n        </Form.Group >\r\n        <Form.Group>\r\n        <Form.Label>\r\n          <b>{`${capitalizeFirstLetter(name)}s:`}</b>\r\n          </Form.Label>\r\n        </Form.Group>\r\n    </Form>\r\n    );\r\n  }\r\n\r\nconst ToDo =({inputList,showTaskDit})=> {\r\n\r\n    const [tasks, setTasks] = useState(inputList.tasks);\r\n  \r\n      const addTask = text => {\r\n        const newTasks = [...tasks, { isDone: false,text:text,subTasks:[] }];\r\n        setTasks(newTasks);\r\n      };\r\n    \r\n      const markTask = index => {\r\n        const newTasks = [...tasks];\r\n        if(newTasks[index].isDone == true)\r\n        {\r\n            newTasks[index].isDone =false\r\n        }\r\n        else\r\n        {\r\n            newTasks[index].isDone = true;\r\n        }\r\n        \r\n        setTasks(newTasks);\r\n      };\r\n    \r\n      const removeTask = index => {\r\n        const newTask = [...tasks];\r\n        newTask.splice(index, 1);\r\n        setTasks(newTask);\r\n      };\r\n\r\n    \r\n    return (\r\n    <div >\r\n        <h1 >{inputList.name}</h1>\r\n        <TaskAdder addTask={addTask}size={\"lg\"} name={\"task\"} />\r\n        <div>\r\n          {tasks.map((task, index) => (\r\n            <Card>\r\n              <Card.Body>\r\n                <Task\r\n                key={index}\r\n                index={index}\r\n                task={task}\r\n                markTask={markTask}\r\n                removeTask={removeTask}\r\n                tasks={tasks} \r\n                setTasks={setTasks}\r\n                showTaskDit={showTaskDit}\r\n                />\r\n              </Card.Body>\r\n            </Card>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n  \r\nconst emptyTask={isDone: false,text:\"\",subTasks:[],date: \"\",desc:\"\"}\r\nvar taskG=emptyTask, indexG=0,tasksG=null,setTasksG=null\r\n\r\nconst TaskForm= ({task, index,tasks,setTasks,setShow})=>{\r\n\r\n  const onSubmit=(event)=>\r\n  {\r\n    event.preventDefault();  \r\n    if(tasks==null) return\r\n    const form = event.currentTarget\r\n    console.log(\"task\")\r\n    console.log(form.task.value)\r\n    console.log(\"taskdesc\")\r\n    console.log(form.taskdesc.value)\r\n    console.log(\"date\")\r\n    console.log(form.date.value)\r\n    const taskText=form.task.value\r\n    const taskDesc=form.taskdesc.value\r\n    const taskDate= form.date.value\r\n\r\n    task.text=taskText\r\n    if(taskDate!=\"\")\r\n    task.date=taskDate\r\n    task.desc=taskDesc\r\n   \r\n    var newTasks=tasks\r\n    newTasks[index]=task\r\n    setTasks(newTasks)\r\n    setShow(false)\r\n    setShow(true)\r\n\r\n    \r\n  }\r\n  \r\n\r\n    console.log(task.date)\r\n    return (<Form onSubmit={onSubmit}>\r\n    <Form.Group controlId=\"task\">\r\n      <Form.Label>Task</Form.Label>\r\n      <Form.Control type=\"text\" defaultValue={task.text}/>\r\n    </Form.Group>\r\n    <Form.Group controlId=\"taskdesc\">\r\n      <Form.Label>Description</Form.Label>\r\n      <Form.Control  as=\"textarea\" rows={3} defaultValue={task.desc} />\r\n    </Form.Group>\r\n    <Form.Group controlId=\"date\">\r\n      <Form.Label>Current Due Date:</Form.Label>\r\n      <Form.Label>{task.date}</Form.Label>\r\n      <Form.Label>Change Due Date:</Form.Label>\r\n      <Form.Control type=\"date\"  defaultValue={task.date} />\r\n    </Form.Group>\r\n    <Button variant=\"secondary\" type=\"submit\">\r\n      Save Changes\r\n    </Button>\r\n  </Form>\r\n      )}\r\n\r\n\r\n  const suBatask={isDone: true,text:\"suBatask\"}\r\n  const suBatask2={isDone: false,text:\"suBatask2\"}\r\n  const suBatask3={isDone: false,text:\"suBatask3\"}\r\n\r\n  const atask={isDone: false,text:\"atask\",subTasks:[suBatask,suBatask2,suBatask3],date: \"3/4/1990\",desc:\"afljhasdfhasdjkfh asdfhljasdhf /n akdfj;asd\"}\r\n  const List = {name:\"ListName\", tasks:[atask,atask]}\r\n\r\nconst ToDoContainer = ({InputLists}) => {\r\n  const [show, setShow] = useState(false);\r\n \r\n  JSON.parse(JSON.stringify(List))\r\n    InputLists=[List,List,List]\r\n    //creates deep copys\r\n    InputLists=[JSON.parse(JSON.stringify(List)),JSON.parse(JSON.stringify(List)),JSON.parse(JSON.stringify(List))]\r\n    const [Lists, setLists] = useState(InputLists);\r\n\r\n    const addList = text => {\r\n      const newList = [...Lists, {name:text, tasks:[]}];\r\n      setLists(newList);\r\n    };\r\n\r\n\r\n  \r\n    const showTaskDitForTask = (_task, _index,_tasks,_setTasks) => \r\n    {\r\n       taskG=_task\r\n       indexG=_index\r\n       tasksG=_tasks\r\n       setTasksG=_setTasks\r\n      if(show==true)\r\n      setShow(false)\r\n      else\r\n      setShow(true)\r\n    }\r\n    const showTaskDit=()=>{     \r\n      \r\n      if(show){\r\n      return(\r\n        <Col sm={8}>\r\n          <Row>\r\n            <Col sm={8}>\r\n            <Tab.Content>\r\n              \r\n              {Lists.map((list,index) => {\r\n                \r\n              return(<Tab.Pane eventKey={`#${list.name}_${index}`}>\r\n                  <ToDo \r\n                   inputList={list}\r\n                   showTaskDit={showTaskDitForTask}     \r\n                   />\r\n                  </Tab.Pane>)\r\n              })}\r\n              \r\n            </Tab.Content>\r\n          </Col>\r\n            <Col  sm={4}>\r\n              <TaskForm task={taskG}  index={indexG} tasks={tasksG} setTasks={setTasksG} setShow={setShow}/>\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n      )        \r\n      }\r\n      else\r\n      {\r\n        return(\r\n<Col sm={8}>\r\n          <Tab.Content>\r\n            \r\n            {Lists.map((list,index) => {\r\n            return(<Tab.Pane eventKey={`#${list.name}_${index}`}>\r\n                <ToDo \r\n                  inputList={list}\r\n                  showTaskDit={showTaskDitForTask}\r\n                />\r\n                </Tab.Pane>)\r\n            })}\r\n            \r\n          </Tab.Content>\r\n        </Col>\r\n        )\r\n      }\r\n    }\r\n\r\n    return (\r\n<Tab.Container id=\"list-group-tabs-example\" defaultActiveKey=\"#link1\">\r\n  <Row>\r\n    <Col sm={4}>\r\n      <ListGroup>\r\n      <TaskAdder addTask={addList}size={\"sm\"} name={\"list\"}/>\r\n        {Lists.map((list,index) => <ListGroup.Item action href={`#${list.name}_${index}`}> {`${list.name}`} </ListGroup.Item>)}\r\n        \r\n      </ListGroup>\r\n    </Col>       \r\n    {showTaskDit()}\r\n      \r\n  </Row>\r\n</Tab.Container>\r\n      \r\n  )}\r\n\r\n  \r\n\r\n  export default ToDoContainer","C:\\Users\\Yonathan\\Documents\\GitHub\\WebProject\\client\\src\\services\\serverCom.js",[],{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":7,"column":10,"nodeType":"64","messageId":"65","endLine":7,"endColumn":20},{"ruleId":"62","severity":1,"message":"66","line":13,"column":3,"nodeType":"64","messageId":"65","endLine":13,"endColumn":7},{"ruleId":"62","severity":1,"message":"67","line":1,"column":36,"nodeType":"64","messageId":"65","endLine":1,"endColumn":40},{"ruleId":"62","severity":1,"message":"68","line":1,"column":41,"nodeType":"64","messageId":"65","endLine":1,"endColumn":52},{"ruleId":"62","severity":1,"message":"69","line":1,"column":53,"nodeType":"64","messageId":"65","endLine":1,"endColumn":59},{"ruleId":"62","severity":1,"message":"70","line":5,"column":5,"nodeType":"64","messageId":"65","endLine":5,"endColumn":12},{"ruleId":"62","severity":1,"message":"71","line":1,"column":24,"nodeType":"64","messageId":"65","endLine":1,"endColumn":33},{"ruleId":"62","severity":1,"message":"72","line":1,"column":43,"nodeType":"64","messageId":"65","endLine":1,"endColumn":48},{"ruleId":"62","severity":1,"message":"71","line":1,"column":24,"nodeType":"64","messageId":"65","endLine":1,"endColumn":33},{"ruleId":"62","severity":1,"message":"72","line":1,"column":43,"nodeType":"64","messageId":"65","endLine":1,"endColumn":48},{"ruleId":"62","severity":1,"message":"70","line":10,"column":5,"nodeType":"64","messageId":"65","endLine":10,"endColumn":12},{"ruleId":"62","severity":1,"message":"71","line":1,"column":29,"nodeType":"64","messageId":"65","endLine":1,"endColumn":38},{"ruleId":"62","severity":1,"message":"72","line":1,"column":48,"nodeType":"64","messageId":"65","endLine":1,"endColumn":53},{"ruleId":"62","severity":1,"message":"73","line":1,"column":54,"nodeType":"64","messageId":"65","endLine":1,"endColumn":59},{"ruleId":"74","severity":1,"message":"75","line":46,"column":37,"nodeType":"76","messageId":"77","endLine":46,"endColumn":39},{"ruleId":"74","severity":1,"message":"75","line":144,"column":35,"nodeType":"76","messageId":"77","endLine":144,"endColumn":37},{"ruleId":"74","severity":1,"message":"78","line":210,"column":16,"nodeType":"76","messageId":"77","endLine":210,"endColumn":18},{"ruleId":"74","severity":1,"message":"75","line":276,"column":14,"nodeType":"76","messageId":"77","endLine":276,"endColumn":16},"no-native-reassign",["79"],"no-negated-in-lhs",["80"],"no-unused-vars","'useHistory' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'Form' is defined but never used.","'FormControl' is defined but never used.","'Button' is defined but never used.","'history' is assigned a value but never used.","'Container' is defined but never used.","'Badge' is defined but never used.","'Alert' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation"]